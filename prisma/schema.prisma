datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String      @id @default(cuid())
  name        String
  email       String      @unique
  password    String
  age         Int
  sex         String
  address     String
  phone       String
  education   String
  experience  String
  resume      String?
  portfolio   String?

  // Relations
  projects    Project[]
  proposals   Proposal[]   // ✅ Back-reference from Proposal to User

  createdAt   DateTime    @default(now())
}

model Project {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String
  technologies Json

  // Relations
  proposals   Proposal[]   // ✅ Back-reference from Proposal to Project

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Proposal {
  id           String    @id @default(cuid())
  project      Project?  @relation(fields: [projectId], references: [id])  // Made optional
  projectId    String?   // Made optional
  jobOffer     JobOffer? @relation(fields: [jobOfferId], references: [id])  // New optional relation
  jobOfferId   String?   // New optional field
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  proposalText String
  status       String    @default("draft") // draft | submitted | accepted | rejected
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model JobOffer {
  id           String    @id @default(cuid())
  title        String
  description  String
  technologies Json      // Assuming similar to Project; store as JSON (e.g., array of strings)
  company      String?   // Optional fields for external job offers
  url          String?   // e.g., source URL if scraped or external

  // Relations
  proposals    Proposal[]  // Back-reference from Proposal to JobOffer

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}